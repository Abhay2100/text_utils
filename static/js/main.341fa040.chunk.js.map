{"version":3,"sources":["MyComponents/Header.js","MyComponents/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","id","className","href","title","type","defaultProps","searchBar","TextForm","useState","color","backgroundColor","border","myStyle","setMyStyle","btnText","setbtnText","text","setText","style","heading","value","onChange","event","console","log","target","rows","onClick","newText","toUpperCase","trim","document","getElementById","select","navigator","clipboard","writeText","split","join","class","element","body","classList","add","remove","length","App","AboutText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.341fa040.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Header(props) {\r\n    return (\r\n        <div>\r\n            <nav id=\"navbar\" className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                {/* <a className=\"nav-link\" href=\"#\">{props.AboutText}</a> */}\r\n                            </li>\r\n                            {/* <li className=\"nav-item dropdown\">\r\n                                <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                                    Dropdown\r\n                                </a>\r\n                                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                    <li><a className=\"dropdown-item\" href=\"#\">Action</a></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"#\">Another action</a></li>\r\n                                    <li><hr className=\"dropdown-divider\" /></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"#\">Something else here</a></li>\r\n                                </ul>\r\n                            </li> */}\r\n                            {/* <li className=\"nav-item\">\r\n                                <a className=\"nav-link disabled\">Disabled</a>\r\n                            </li> */}\r\n                        </ul>\r\n\r\n                        {/* { props.searchBar? <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form>:\"No Search Bar\"} */}\r\n                        \r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    title: \"Amazon\",\r\n    searchBar: true\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string,\r\n    searchBar: PropTypes.bool.isRequired\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: 'black',\r\n    backgroundColor: 'white',\r\n    border: \"1px solid white\"\r\n  })\r\n  const [btnText, setbtnText] = useState(\"Dark Mode\")\r\n\r\n  const textArea = {\r\n    border:'1px solid black'\r\n  }\r\n  const darkLight = () => {\r\n    if (myStyle.color === 'black') {\r\n      setMyStyle({\r\n        color: 'white',\r\n        backgroundColor: 'black',\r\n        \r\n      })\r\n      document.body.style.backgroundColor = \"black\"\r\n      setbtnText(\"Light Mode\")\r\n      var element = document.getElementById(\"btn-dark\");\r\n\r\n      element.classList.add(\"btn-light\");\r\n      element.classList.remove(\"btn-dark\");\r\n      var element = document.getElementById(\"navbar\");\r\n      element.classList.add(\"navbar-dark\", \"bg-dark\");\r\n      element.classList.remove(\"navbar-light\", \"bg-light\");\r\n      var text = document.getElementById(\"myBox\");\r\n      text.style.backgroundColor = \"black\";\r\n      document.title = \"TextUtils - DarkMode\"\r\n    }\r\n    else {\r\n      setMyStyle({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n        border: \"1px solid white\"\r\n\r\n      })\r\n      setbtnText(\"Dark Mode\")\r\n      document.body.style.backgroundColor = \"white\"\r\n      var element = document.getElementById(\"btn-dark\");\r\n      element.classList.add(\"btn-dark\");\r\n      element.classList.remove(\"btn-light\");\r\n      var element = document.getElementById(\"navbar\");\r\n      element.classList.remove(\"navbar-dark\", \"bg-dark\");\r\n      element.classList.add(\"navbar-dark\", \"bg-primary\");\r\n      var text = document.getElementById(\"myBox1\");\r\n      text.style.backgroundColor = \"white\";\r\n      text.style.border = \"1px solid black\";\r\n      document.title = \"TextUtils - LightMode\"\r\n    }\r\n  }\r\n  const handleOnClick = () => {\r\n    console.log(\"Uppercase is clicked\" + text)\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  }\r\n  const handleOnChange = (event) => {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value)\r\n  }\r\n\r\n  const clearText = () => {\r\n    console.log(\"Clear Text\");\r\n    let clearAll = \"\"\r\n    setText(clearAll.trim());\r\n  }\r\n\r\n  const copyText = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  }\r\n\r\n  const removeSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n  }\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1 style={myStyle}>{props.heading}</h1>\r\n        <div className=\"form-group\" id=\"myBox1\" style={textArea}>\r\n          <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"7\" style={myStyle}></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary my-3\" onClick={handleOnClick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary my-3 clear\" onClick={clearText}>Clear</button>\r\n        <button className=\"btn btn-primary my-3 clear\" onClick={copyText}>Copy Text</button>\r\n        <button className=\"btn btn-primary my-3 clear\" onClick={removeSpaces}>Remove Space</button>\r\n        <button type=\"button\" id=\"btn-dark\" class=\"btn btn-dark my-4 mx-2\" onClick={darkLight}>{btnText}</button>\r\n      </div>\r\n      <div className=\"container\" style={myStyle}>\r\n        <h1 >Your Text Summary</h1>\r\n        <p>{text.split(\" \").length - 1} words, {text.length} Characters</p>\r\n        <p>{0.008 * text.split(\" \").length} minutes will required to read this</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n      \r\n    </>\r\n  )\r\n}\r\n","import './App.css';\nimport Header from './MyComponents/Header';\nimport TextForm from './MyComponents/TextForm';\n// import About from './MyComponents/About';\n// import React, { useState } from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n \n\n  return (\n    <>\n        {/* <Router> */}\n      <Header title=\"TextUtils\" AboutText=\"About us\"/>\n      <div className=\"container my-3\">\n      {/* <Switch> */}\n          {/* <Route path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          \n          {/* <Route path=\"/\"> */}\n            <TextForm heading=\"Enter Your Text Here\" />\n          {/* </Route> */}\n      {/* </Switch> */}\n      \n      {/* <About title=\"About us\"/> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}